name: Test between jobs
on:
  push:
    branches:
      - "master"
env:
  DAY_OF_WEEK: Monday
  
jobs:
  color:
    runs-on: ubuntu-latest
    steps:
    - name: Format output
      id: format-output-value
      run: |
        RESULT="succes"
        if [ "$RESULT" == "success" ]; then
          RESULT="<font color='green'>$RESULT</font>"
        else
          RESULT="<font color=\"#80e27e\">$RESULT</font>"
        fi
        echo "valor: $RESULT"
        echo "formatted-result-value=$RESULT" >> $GITHUB_OUTPUT
    - name: Prueba
      run: |
        echo "the result is ${{ steps.format-output-value.outputs.formatted-result-value }}"
    outputs:
      output1: ${{ steps.format-output-value.outputs.formatted-result-value }}

  test:
    runs-on: ubuntu-latest
    needs: [color]
    steps:
    - name: Format output
      id: format-output-value2
      run: |
        echo "salida del paso: ${{ needs.color.outputs.output1}}"
  notification:
    runs-on: ubuntu-latest
    needs: [color]
    steps:
    - name: Google notification
      run: |
        curl --location --request POST '${{ secrets.WEBHOOK }}' \
        --header 'Content-Type: application/json' \
        --data-raw '{
          "cardsV2": [
            {
              "cardId": "unique-card-id",
              "card": {
                  "header": {
                    "title": "Sasha",
                    "subtitle": "Software Engineer",
                    "imageUrl":
                    "https://developers.google.com/chat/images/quickstart-app-avatar.png",
                    "imageType": "CIRCLE",
                    "imageAltText": "Avatar for Sasha",
                  },
                  "sections": [
                    {
                      "header": "Contact Info",
                      "collapsible": true,
                      "uncollapsibleWidgetsCount": 1,
                      "widgets": [
                        {
                          "decoratedText": {
                            "startIcon": {
                              "knownIcon": "EMAIL",
                            },
                            "text": "sasha@example.com",
                          }
                        },
                        {
                          "decoratedText": {
                            "startIcon": {
                              "knownIcon": "PERSON",
                            },
                            "text": "${{ needs.color.outputs.output1}}",
                          },
                        },
                        {
                          "decoratedText": {
                            "startIcon": {
                              "knownIcon": "PHONE",
                            },
                            "text": "+1 (555) 555-1234",
                          }
                        },
                        {
                          "buttonList": {
                            "buttons": [
                              {
                                "text": "Share",
                                "onClick": {
                                  "openLink": {
                                    "url": "https://example.com/share",
                                  }
                                }
                              },
                              {
                                "text": "Edit",
                                "onClick": {
                                  "action": {
                                    "function": "goToView",
                                    "parameters": [
                                      {
                                        "key": "viewType",
                                        "value": "EDIT",
                                      }
                                    ],
                                  }
                                }
                              },
                            ],
                          }
                        },
                      ],
                    },
                  ],
                },
            }
          ]
        }'


#     - name: bajar otro repositorio en carpeta hola 
#       run: |
#           echo "Today is $DAY_OF_WEEK" | tee archivo2.txt
#           ls -ltr
#           pwd
#     - uses: actions/checkout@v3
#       with:
#         path: 'hola'
#         repository: JohanWilliamSanchez/lgmk-backend-hello-world
#         token: '${{ secrets.token_alejo }}'
#     - name: Revisar carpeta hola
#       run: |
#         ls -ltr
        
#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_JOHAN }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_JOHAN }}
#         aws-region: us-east-1
#     - name: Copy files to the test website with the AWS CLI
#       run: |
#         aws s3 sync . s3://${{ secrets.AWS_BUCKET }}/New_project
        
          
#   Sonar_Cloud:
#     runs-on: ubuntu-latest
#     needs: [Copy_files]
#     steps:
#     - name: analyses
#       run: |
#           echo "Today is $DAY_OF_WEEK"
#           ls -ltr
#           pwd
#     - name: get status sonar
#       id: sonar
#       run: |
#           curl --user ${{secrets.SONAR_TOKEN}} https://sonarcloud.io/api/qualitygates/project_status?projectKey='lgmk-nodejs-backend-starter' -o response.json
#           echo "::set-output name=status::$(cat ./response.json | jq .projectStatus.status | sed 's/"//g' )"
          
#     - name: comparate status sonar
#       if: steps.sonar.outputs.status != 'ERROR'
#       run: |
#         echo "Status sonar cloud ${{ steps.sonar.outputs.status }}"
#         exit 1
      
#   Test_JEST:
#     runs-on: ubuntu-latest
#     needs: [Sonar_Cloud]
#     steps:
#     - uses: actions/checkout@v3
#     - name: run test
#       run: |
#           echo "Run test"
#           ls -ltr
          
#   Deploy_servelles:
#     runs-on: ubuntu-latest
#     needs: [Test_JEST]
#     steps:
#     - name: Deploy
#       run: |
#           echo "Metodo deploy"
#   #        exit 1

#   Notification:
#     runs-on: ubuntu-latest
#     needs: [Sonar_Cloud, Test_JEST ,Deploy_servelles]
#     if: always()
#     steps:
#     - name: Send notification
#       run: |
#           echo "Status SonarCloud ${{needs.Sonar_Cloud.result}}"
#           echo "Status Test_JEST ${{needs.Test_JEST.result}}"
#           echo "Status Deploy_servelles ${{needs.Deploy_servelles.result}}"
          
#   Notification_without:
#     runs-on: ubuntu-latest
#     needs: [Sonar_Cloud, Test_JEST ,Deploy_servelles]
#     steps:
#     - name: Send notification
#       run: |
#           echo "Status SonarCloud ${{needs.Sonar_Cloud.result}}"
#           echo "Status Test_JEST ${{needs.Test_JEST.result}}"
#           echo "Status Deploy_servelles ${{needs.Deploy_servelles.result}}"
     
  
